# https://www.codewars.com/kata/5779f894ec8832493f00002d/discuss#61ce692e7abfec000e429ffe

"""
Fibonacci numbers are generated by setting F0 = 0, F1 = 1,
and then using the formula:

Fn = Fn-1 + Fn-2
Your task is to efficiently calculate the nth element in the Fibonacci
sequence and then count the occurrence of each digit in the number.
Return a list of integer pairs sorted in descending order.

10 ≤ n ≤ 100000

Examples
f(10) = 55  # returns [(2, 5)], as there are two occurances of digit 5

f(10000)    # returns:
  [(254, 3),
   (228, 2),
   (217, 6),
   (217, 0),
   (202, 5),
   (199, 1),
   (198, 7),
   (197, 8),
   (194, 4),
   (184, 9)]
If two integers have the same count, sort them in descending order.

Your algorithm must be efficient.
"""


def fib_digits(n):

    i = 2
    nextnum = 1
    sequence = [1]

    while i <= n:
        sequence.append(nextnum)
        nextnum = sequence[-1]+sequence[-2]
        i = i+1

    seq = set(list(str(sequence[-1])))
    occurances = [(str(sequence[-1]).count(str(x)), int(x)) for x in seq]
    return list(reversed(sorted(occurances)))


print(fib_digits(10000))
